module Testeo where

import Test.HUnit
import Tppr

run = runTestTT tests 

tests = test [
    "Test ej10" ~: (existeSecuenciaDeAmigos redA usuario1 usuario4) ~=? True,
    "Test 2 ej10" ~: (existeSecuenciaDeAmigos redB usuario1 usuario3) ~=? True,
    "Test 3 ej10" ~: (existeSecuenciaDeAmigos redB usuario2 usuario3) ~=? True,
    "Test 4 ej10" ~: (existeSecuenciaDeAmigos redA usuario2 usuario4) ~=? True,
    "Test 4 ej10" ~: (existeSecuenciaDeAmigos redB usuario5 usuario3) ~=? False 
    ]




--Ejemplos 

usuario1 = (1, "Juan")
usuario2 = (2, "Natalia")
usuario3 = (3, "Pedro")
usuario4 = (4, "Mariela")
usuario5 = (5, "Natalia")

relacion1_2 = (usuario1, usuario2)
relacion1_3 = (usuario1, usuario3)
relacion1_4 = (usuario4, usuario1) -- Notar que el orden en el que aparecen los usuarios es indistinto
relacion2_3 = (usuario3, usuario2)
relacion2_4 = (usuario2, usuario4)
relacion3_4 = (usuario4, usuario3)

publicacion1_1 = (usuario1, "Este es mi primer post", [usuario2, usuario4])
publicacion1_2 = (usuario1, "Este es mi segundo post", [usuario4])
publicacion1_3 = (usuario1, "Este es mi tercer post", [usuario2, usuario5])
publicacion1_4 = (usuario1, "Este es mi cuarto post", [])
publicacion1_5 = (usuario1, "Este es como mi quinto post", [usuario5])

publicacion2_1 = (usuario2, "Hello World", [usuario4])
publicacion2_2 = (usuario2, "Good Bye World", [usuario1, usuario4])

publicacion3_1 = (usuario3, "Lorem Ipsum", [])
publicacion3_2 = (usuario3, "dolor sit amet", [usuario2])
publicacion3_3 = (usuario3, "consectetur adipiscing elit", [usuario2, usuario5])

publicacion4_1 = (usuario4, "I am Alice. Not", [usuario1, usuario2])
publicacion4_2 = (usuario4, "I am Bob", [])
publicacion4_3 = (usuario4, "Just kidding, i am Mariela", [usuario1, usuario3])


usuariosA = [usuario1, usuario2, usuario3, usuario4]
relacionesA = [relacion1_2, relacion1_4, relacion2_3, relacion2_4, relacion3_4]
publicacionesA = [publicacion1_1, publicacion1_2, publicacion2_1, publicacion2_2, publicacion3_1, publicacion3_2, publicacion4_1, publicacion4_2]
redA = (usuariosA, relacionesA, publicacionesA)

usuariosB = [usuario1, usuario2, usuario3, usuario5]
relacionesB = [relacion1_2, relacion2_3]
publicacionesB = [publicacion1_3, publicacion1_4, publicacion1_5, publicacion3_1, publicacion3_2, publicacion3_3]
redB = (usuariosB, relacionesB, publicacionesB)

restarListas :: [Usuario] -> [Usuario] -> [Usuario]
restarListas [] ys  = ys   
restarListas (x:xs) ys= restarListas xs (quitartodos x ys)

acumuladora :: Usuario -> [Usuario] -> [Usuario]
acumuladora x ys = x : ys


-- describir qué hace la función: 
existeSecuenciaDeAmigos :: RedSocial -> Usuario -> Usuario -> Bool
existeSecuenciaDeAmigos r u u2 = existeSecuenciaDeAmigos2 r u u2 (amigosDe r u) 

existeSecuenciaDeAmigos1 :: RedSocial -> Usuario -> Usuario -> [Usuario] -> Bool
existeSecuenciaDeAmigos1 r u u2 ys =  existeSecuenciaDeAmigos2 r u u2 (restarListas ys (amigosDe u))

existeSecuenciaDeAmigos2 :: RedSocial -> Usuario -> Usuario -> [Usuario] -> Bool
existeSecuenciaDeAmigos2 _ _ _ [] = False 
existeSecuenciaDeAmigos2 r u u2 (x:xs) | pertenece u2 (x:xs) = True 
                                       | otherwise = existeSecuenciaDeAmigosAux r (x:xs) u2 || existeSecuenciaDeAmigos1 r x u2 [u]

existeSecuenciaDeAmigosAux :: RedSocial -> [Usuario] -> Usuario -> Bool
existeSecuenciaDeAmigosAux _ [] _ = False
existeSecuenciaDeAmigosAux r (x:xs) u2 | pertenece u2 (amigosDe r x) = True
                                       | otherwise = existeSecuenciaDeAmigosAux r xs u2 
